
HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002b30  08002b30  00012b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b74  08002b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002b84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002b84  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d354  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b80  00000000  00000000  0002d390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002ef10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  0002fb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020115  00000000  00000000  000306c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd4e  00000000  00000000  000507dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5cf7  00000000  00000000  0005d52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00123222  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003288  00000000  00000000  00123278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002b18 	.word	0x08002b18

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002b18 	.word	0x08002b18

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001ce:	b095      	sub	sp, #84	; 0x54
 80001d0:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fae4 	bl	800079e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f859 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f93d 	bl	8000458 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001de:	f000 f8b9 	bl	8000354 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  int duty = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
  int step = 0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  setPWM(htim1, TIM_CHANNEL_3, 255, 127);
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80001ea:	2108      	movs	r1, #8
 80001ec:	4825      	ldr	r0, [pc, #148]	; (8000284 <main+0xb8>)
 80001ee:	f000 fdd7 	bl	8000da0 <HAL_GPIO_TogglePin>
//		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
////		  osDelay(10);
//		  HAL_Delay(10);
//	  }

	  HAL_Delay(100);
 80001f2:	2064      	movs	r0, #100	; 0x64
 80001f4:	f000 fb48 	bl	8000888 <HAL_Delay>
	  if (duty == 0) step = 100;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d101      	bne.n	8000202 <main+0x36>
 80001fe:	2364      	movs	r3, #100	; 0x64
 8000200:	603b      	str	r3, [r7, #0]
	  if (duty == 10000) step = -100;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f242 7210 	movw	r2, #10000	; 0x2710
 8000208:	4293      	cmp	r3, r2
 800020a:	d102      	bne.n	8000212 <main+0x46>
 800020c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000210:	603b      	str	r3, [r7, #0]
	  duty += step;
 8000212:	687a      	ldr	r2, [r7, #4]
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	4413      	add	r3, r2
 8000218:	607b      	str	r3, [r7, #4]
	  setPWM(htim2, TIM_CHANNEL_1, 60000, duty);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	b29b      	uxth	r3, r3
 800021e:	4e1a      	ldr	r6, [pc, #104]	; (8000288 <main+0xbc>)
 8000220:	9311      	str	r3, [sp, #68]	; 0x44
 8000222:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000226:	9310      	str	r3, [sp, #64]	; 0x40
 8000228:	2300      	movs	r3, #0
 800022a:	930f      	str	r3, [sp, #60]	; 0x3c
 800022c:	466d      	mov	r5, sp
 800022e:	f106 0410 	add.w	r4, r6, #16
 8000232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800023a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800023c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800023e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000242:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000246:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800024a:	f000 f973 	bl	8000534 <setPWM>
	  setPWM(htim2, TIM_CHANNEL_2, 60000, duty);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	b29b      	uxth	r3, r3
 8000252:	4e0d      	ldr	r6, [pc, #52]	; (8000288 <main+0xbc>)
 8000254:	9311      	str	r3, [sp, #68]	; 0x44
 8000256:	f64e 2360 	movw	r3, #60000	; 0xea60
 800025a:	9310      	str	r3, [sp, #64]	; 0x40
 800025c:	2304      	movs	r3, #4
 800025e:	930f      	str	r3, [sp, #60]	; 0x3c
 8000260:	466d      	mov	r5, sp
 8000262:	f106 0410 	add.w	r4, r6, #16
 8000266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800026a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800026c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800026e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000272:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000276:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800027a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800027e:	f000 f959 	bl	8000534 <setPWM>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000282:	e7b2      	b.n	80001ea <main+0x1e>
 8000284:	48000400 	.word	0x48000400
 8000288:	20000028 	.word	0x20000028

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b096      	sub	sp, #88	; 0x58
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0314 	add.w	r3, r7, #20
 8000296:	2244      	movs	r2, #68	; 0x44
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fc34 	bl	8002b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	463b      	mov	r3, r7
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002b2:	f000 fdad 	bl	8000e10 <HAL_PWREx_ControlVoltageScaling>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002bc:	f000 f96a 	bl	8000594 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002c0:	f000 fd88 	bl	8000dd4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002c4:	4b22      	ldr	r3, [pc, #136]	; (8000350 <SystemClock_Config+0xc4>)
 80002c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002ca:	4a21      	ldr	r2, [pc, #132]	; (8000350 <SystemClock_Config+0xc4>)
 80002cc:	f023 0318 	bic.w	r3, r3, #24
 80002d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80002d4:	2314      	movs	r3, #20
 80002d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002d8:	2301      	movs	r3, #1
 80002da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002dc:	2301      	movs	r3, #1
 80002de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002e4:	2360      	movs	r3, #96	; 0x60
 80002e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e8:	2302      	movs	r3, #2
 80002ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002ec:	2301      	movs	r3, #1
 80002ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002f0:	2301      	movs	r3, #1
 80002f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80002f4:	2310      	movs	r3, #16
 80002f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002f8:	2307      	movs	r3, #7
 80002fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002fc:	2302      	movs	r3, #2
 80002fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000300:	2302      	movs	r3, #2
 8000302:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f107 0314 	add.w	r3, r7, #20
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fdd7 	bl	8000ebc <HAL_RCC_OscConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000314:	f000 f93e 	bl	8000594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	230f      	movs	r3, #15
 800031a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031c:	2303      	movs	r3, #3
 800031e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000324:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000328:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800032a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800032e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000330:	463b      	mov	r3, r7
 8000332:	2101      	movs	r1, #1
 8000334:	4618      	mov	r0, r3
 8000336:	f001 f9e1 	bl	80016fc <HAL_RCC_ClockConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000340:	f000 f928 	bl	8000594 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000344:	f001 fba8 	bl	8001a98 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000348:	bf00      	nop
 800034a:	3758      	adds	r7, #88	; 0x58
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000

08000354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b08e      	sub	sp, #56	; 0x38
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800035a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000368:	f107 031c 	add.w	r3, r7, #28
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000374:	463b      	mov	r3, r7
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]
 8000382:	615a      	str	r2, [r3, #20]
 8000384:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000386:	4b33      	ldr	r3, [pc, #204]	; (8000454 <MX_TIM2_Init+0x100>)
 8000388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800038c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800038e:	4b31      	ldr	r3, [pc, #196]	; (8000454 <MX_TIM2_Init+0x100>)
 8000390:	2200      	movs	r2, #0
 8000392:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000394:	4b2f      	ldr	r3, [pc, #188]	; (8000454 <MX_TIM2_Init+0x100>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800039a:	4b2e      	ldr	r3, [pc, #184]	; (8000454 <MX_TIM2_Init+0x100>)
 800039c:	f04f 32ff 	mov.w	r2, #4294967295
 80003a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a2:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <MX_TIM2_Init+0x100>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003a8:	4b2a      	ldr	r3, [pc, #168]	; (8000454 <MX_TIM2_Init+0x100>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003ae:	4829      	ldr	r0, [pc, #164]	; (8000454 <MX_TIM2_Init+0x100>)
 80003b0:	f001 fb82 	bl	8001ab8 <HAL_TIM_Base_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80003ba:	f000 f8eb 	bl	8000594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003c8:	4619      	mov	r1, r3
 80003ca:	4822      	ldr	r0, [pc, #136]	; (8000454 <MX_TIM2_Init+0x100>)
 80003cc:	f001 fea6 	bl	800211c <HAL_TIM_ConfigClockSource>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80003d6:	f000 f8dd 	bl	8000594 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003da:	481e      	ldr	r0, [pc, #120]	; (8000454 <MX_TIM2_Init+0x100>)
 80003dc:	f001 fbc3 	bl	8001b66 <HAL_TIM_PWM_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80003e6:	f000 f8d5 	bl	8000594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ee:	2300      	movs	r3, #0
 80003f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003f2:	f107 031c 	add.w	r3, r7, #28
 80003f6:	4619      	mov	r1, r3
 80003f8:	4816      	ldr	r0, [pc, #88]	; (8000454 <MX_TIM2_Init+0x100>)
 80003fa:	f002 fafb 	bl	80029f4 <HAL_TIMEx_MasterConfigSynchronization>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000404:	f000 f8c6 	bl	8000594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000408:	2360      	movs	r3, #96	; 0x60
 800040a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000410:	2300      	movs	r3, #0
 8000412:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000418:	463b      	mov	r3, r7
 800041a:	2200      	movs	r2, #0
 800041c:	4619      	mov	r1, r3
 800041e:	480d      	ldr	r0, [pc, #52]	; (8000454 <MX_TIM2_Init+0x100>)
 8000420:	f001 fd68 	bl	8001ef4 <HAL_TIM_PWM_ConfigChannel>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800042a:	f000 f8b3 	bl	8000594 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800042e:	463b      	mov	r3, r7
 8000430:	2204      	movs	r2, #4
 8000432:	4619      	mov	r1, r3
 8000434:	4807      	ldr	r0, [pc, #28]	; (8000454 <MX_TIM2_Init+0x100>)
 8000436:	f001 fd5d 	bl	8001ef4 <HAL_TIM_PWM_ConfigChannel>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000440:	f000 f8a8 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000444:	4803      	ldr	r0, [pc, #12]	; (8000454 <MX_TIM2_Init+0x100>)
 8000446:	f000 f8ed 	bl	8000624 <HAL_TIM_MspPostInit>

}
 800044a:	bf00      	nop
 800044c:	3738      	adds	r7, #56	; 0x38
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000028 	.word	0x20000028

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 030c 	add.w	r3, r7, #12
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046e:	4b2f      	ldr	r3, [pc, #188]	; (800052c <MX_GPIO_Init+0xd4>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000472:	4a2e      	ldr	r2, [pc, #184]	; (800052c <MX_GPIO_Init+0xd4>)
 8000474:	f043 0304 	orr.w	r3, r3, #4
 8000478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047a:	4b2c      	ldr	r3, [pc, #176]	; (800052c <MX_GPIO_Init+0xd4>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	f003 0304 	and.w	r3, r3, #4
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b29      	ldr	r3, [pc, #164]	; (800052c <MX_GPIO_Init+0xd4>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	4a28      	ldr	r2, [pc, #160]	; (800052c <MX_GPIO_Init+0xd4>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000492:	4b26      	ldr	r3, [pc, #152]	; (800052c <MX_GPIO_Init+0xd4>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049e:	4b23      	ldr	r3, [pc, #140]	; (800052c <MX_GPIO_Init+0xd4>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	4a22      	ldr	r2, [pc, #136]	; (800052c <MX_GPIO_Init+0xd4>)
 80004a4:	f043 0302 	orr.w	r3, r3, #2
 80004a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004aa:	4b20      	ldr	r3, [pc, #128]	; (800052c <MX_GPIO_Init+0xd4>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	f003 0302 	and.w	r3, r3, #2
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2108      	movs	r1, #8
 80004ba:	481d      	ldr	r0, [pc, #116]	; (8000530 <MX_GPIO_Init+0xd8>)
 80004bc:	f000 fc58 	bl	8000d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004c0:	2304      	movs	r3, #4
 80004c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c4:	2302      	movs	r3, #2
 80004c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004cc:	2303      	movs	r3, #3
 80004ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004d0:	2307      	movs	r3, #7
 80004d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 030c 	add.w	r3, r7, #12
 80004d8:	4619      	mov	r1, r3
 80004da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004de:	f000 fadd 	bl	8000a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80004e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e8:	2302      	movs	r3, #2
 80004ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004f0:	2303      	movs	r3, #3
 80004f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80004f4:	2303      	movs	r3, #3
 80004f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	4619      	mov	r1, r3
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000502:	f000 facb 	bl	8000a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000506:	2308      	movs	r3, #8
 8000508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2300      	movs	r3, #0
 8000514:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	4619      	mov	r1, r3
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <MX_GPIO_Init+0xd8>)
 800051e:	f000 fabd 	bl	8000a9c <HAL_GPIO_Init>

}
 8000522:	bf00      	nop
 8000524:	3720      	adds	r7, #32
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000
 8000530:	48000400 	.word	0x48000400

08000534 <setPWM>:

/* USER CODE BEGIN 4 */

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 8000534:	b084      	sub	sp, #16
 8000536:	b580      	push	{r7, lr}
 8000538:	b088      	sub	sp, #32
 800053a:	af00      	add	r7, sp, #0
 800053c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000540:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&timer, channel);
 8000544:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000546:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800054a:	f001 fc4b 	bl	8001de4 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;

	timer.Init.Period = period; // set the period duration
 800054e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000552:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 8000554:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000558:	f001 fb05 	bl	8001b66 <HAL_TIM_PWM_Init>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800055c:	2360      	movs	r3, #96	; 0x60
 800055e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = pulse; // set the pulse duration
 8000560:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8000564:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000572:	4619      	mov	r1, r3
 8000574:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000578:	f001 fcbc 	bl	8001ef4 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 800057c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800057e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000582:	f001 fb51 	bl	8001c28 <HAL_TIM_PWM_Start>
}
 8000586:	bf00      	nop
 8000588:	3720      	adds	r7, #32
 800058a:	46bd      	mov	sp, r7
 800058c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000590:	b004      	add	sp, #16
 8000592:	4770      	bx	lr

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	e7fe      	b.n	800059c <Error_Handler+0x8>
	...

080005a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <HAL_MspInit+0x44>)
 80005a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005aa:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <HAL_MspInit+0x44>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6613      	str	r3, [r2, #96]	; 0x60
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <HAL_MspInit+0x44>)
 80005b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <HAL_MspInit+0x44>)
 80005c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c2:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <HAL_MspInit+0x44>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c8:	6593      	str	r3, [r2, #88]	; 0x58
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_MspInit+0x44>)
 80005cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005f8:	d10b      	bne.n	8000612 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_TIM_Base_MspInit+0x38>)
 80005fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fe:	4a08      	ldr	r2, [pc, #32]	; (8000620 <HAL_TIM_Base_MspInit+0x38>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6593      	str	r3, [r2, #88]	; 0x58
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_TIM_Base_MspInit+0x38>)
 8000608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000644:	d11c      	bne.n	8000680 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <HAL_TIM_MspPostInit+0x64>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <HAL_TIM_MspPostInit+0x64>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <HAL_TIM_MspPostInit+0x64>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800065e:	2322      	movs	r3, #34	; 0x22
 8000660:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000662:	2302      	movs	r3, #2
 8000664:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800066e:	2301      	movs	r3, #1
 8000670:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	4619      	mov	r1, r3
 8000678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067c:	f000 fa0e 	bl	8000a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <NMI_Handler+0x4>

08000692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <HardFault_Handler+0x4>

08000698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <MemManage_Handler+0x4>

0800069e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <BusFault_Handler+0x4>

080006a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <UsageFault_Handler+0x4>

080006aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d8:	f000 f8b6 	bl	8000848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <SystemInit+0x64>)
 80006e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ea:	4a16      	ldr	r2, [pc, #88]	; (8000744 <SystemInit+0x64>)
 80006ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <SystemInit+0x68>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a13      	ldr	r2, [pc, #76]	; (8000748 <SystemInit+0x68>)
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <SystemInit+0x68>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <SystemInit+0x68>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <SystemInit+0x68>)
 800070c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000710:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000714:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <SystemInit+0x68>)
 8000718:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800071c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <SystemInit+0x68>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a09      	ldr	r2, [pc, #36]	; (8000748 <SystemInit+0x68>)
 8000724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000728:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <SystemInit+0x68>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <SystemInit+0x64>)
 8000732:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000736:	609a      	str	r2, [r3, #8]
#endif
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00
 8000748:	40021000 	.word	0x40021000

0800074c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800074c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000784 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000750:	f7ff ffc6 	bl	80006e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000754:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000756:	e003      	b.n	8000760 <LoopCopyDataInit>

08000758 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800075a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800075c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800075e:	3104      	adds	r1, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000760:	480a      	ldr	r0, [pc, #40]	; (800078c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000764:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000766:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000768:	d3f6      	bcc.n	8000758 <CopyDataInit>
	ldr	r2, =_sbss
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <LoopForever+0x12>)
	b	LoopFillZerobss
 800076c:	e002      	b.n	8000774 <LoopFillZerobss>

0800076e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800076e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000770:	f842 3b04 	str.w	r3, [r2], #4

08000774 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <LoopForever+0x16>)
	cmp	r2, r3
 8000776:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000778:	d3f9      	bcc.n	800076e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800077a:	f002 f9a1 	bl	8002ac0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800077e:	f7ff fd25 	bl	80001cc <main>

08000782 <LoopForever>:

LoopForever:
    b LoopForever
 8000782:	e7fe      	b.n	8000782 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000784:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000788:	08002b78 	.word	0x08002b78
	ldr	r0, =_sdata
 800078c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000790:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000794:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000798:	20000078 	.word	0x20000078

0800079c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC1_IRQHandler>

0800079e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a8:	2003      	movs	r0, #3
 80007aa:	f000 f943 	bl	8000a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 f80e 	bl	80007d0 <HAL_InitTick>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	71fb      	strb	r3, [r7, #7]
 80007be:	e001      	b.n	80007c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007c0:	f7ff feee 	bl	80005a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007c4:	79fb      	ldrb	r3, [r7, #7]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <HAL_InitTick+0x6c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d023      	beq.n	800082c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <HAL_InitTick+0x70>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <HAL_InitTick+0x6c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f941 	bl	8000a82 <HAL_SYSTICK_Config>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d10f      	bne.n	8000826 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d809      	bhi.n	8000820 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800080c:	2200      	movs	r2, #0
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	f04f 30ff 	mov.w	r0, #4294967295
 8000814:	f000 f919 	bl	8000a4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000818:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <HAL_InitTick+0x74>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6013      	str	r3, [r2, #0]
 800081e:	e007      	b.n	8000830 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	e004      	b.n	8000830 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	73fb      	strb	r3, [r7, #15]
 800082a:	e001      	b.n	8000830 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800082c:	2301      	movs	r3, #1
 800082e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000830:	7bfb      	ldrb	r3, [r7, #15]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000008 	.word	0x20000008
 8000840:	20000000 	.word	0x20000000
 8000844:	20000004 	.word	0x20000004

08000848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_IncTick+0x20>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_IncTick+0x24>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <HAL_IncTick+0x24>)
 800085a:	6013      	str	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000008 	.word	0x20000008
 800086c:	20000074 	.word	0x20000074

08000870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return uwTick;
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <HAL_GetTick+0x14>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000074 	.word	0x20000074

08000888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000890:	f7ff ffee 	bl	8000870 <HAL_GetTick>
 8000894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a0:	d005      	beq.n	80008ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <HAL_Delay+0x44>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4413      	add	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ae:	bf00      	nop
 80008b0:	f7ff ffde 	bl	8000870 <HAL_GetTick>
 80008b4:	4602      	mov	r2, r0
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d8f7      	bhi.n	80008b0 <HAL_Delay+0x28>
  {
  }
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000008 	.word	0x20000008

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__NVIC_GetPriorityGrouping+0x18>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	f003 0307 	and.w	r3, r3, #7
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	db0a      	blt.n	800095e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	490c      	ldr	r1, [pc, #48]	; (8000980 <__NVIC_SetPriority+0x4c>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	0112      	lsls	r2, r2, #4
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	440b      	add	r3, r1
 8000958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800095c:	e00a      	b.n	8000974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4908      	ldr	r1, [pc, #32]	; (8000984 <__NVIC_SetPriority+0x50>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	3b04      	subs	r3, #4
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	440b      	add	r3, r1
 8000972:	761a      	strb	r2, [r3, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f1c3 0307 	rsb	r3, r3, #7
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	bf28      	it	cs
 80009a6:	2304      	movcs	r3, #4
 80009a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3304      	adds	r3, #4
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d902      	bls.n	80009b8 <NVIC_EncodePriority+0x30>
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3b03      	subs	r3, #3
 80009b6:	e000      	b.n	80009ba <NVIC_EncodePriority+0x32>
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43da      	mvns	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	401a      	ands	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43d9      	mvns	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	4313      	orrs	r3, r2
         );
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3724      	adds	r7, #36	; 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a00:	d301      	bcc.n	8000a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a02:	2301      	movs	r3, #1
 8000a04:	e00f      	b.n	8000a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <SysTick_Config+0x40>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0e:	210f      	movs	r1, #15
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	f7ff ff8e 	bl	8000934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <SysTick_Config+0x40>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SysTick_Config+0x40>)
 8000a20:	2207      	movs	r2, #7
 8000a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	e000e010 	.word	0xe000e010

08000a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ff47 	bl	80008d0 <__NVIC_SetPriorityGrouping>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a5c:	f7ff ff5c 	bl	8000918 <__NVIC_GetPriorityGrouping>
 8000a60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	6978      	ldr	r0, [r7, #20]
 8000a68:	f7ff ff8e 	bl	8000988 <NVIC_EncodePriority>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff5d 	bl	8000934 <__NVIC_SetPriority>
}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff ffb0 	bl	80009f0 <SysTick_Config>
 8000a90:	4603      	mov	r3, r0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b087      	sub	sp, #28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aaa:	e148      	b.n	8000d3e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f000 813a 	beq.w	8000d38 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0303 	and.w	r3, r3, #3
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d005      	beq.n	8000adc <HAL_GPIO_Init+0x40>
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d130      	bne.n	8000b3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68da      	ldr	r2, [r3, #12]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b12:	2201      	movs	r2, #1
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	091b      	lsrs	r3, r3, #4
 8000b28:	f003 0201 	and.w	r2, r3, #1
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 0303 	and.w	r3, r3, #3
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d017      	beq.n	8000b7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	2203      	movs	r2, #3
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 0303 	and.w	r3, r3, #3
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d123      	bne.n	8000bce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	08da      	lsrs	r2, r3, #3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3208      	adds	r2, #8
 8000b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	220f      	movs	r2, #15
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	691a      	ldr	r2, [r3, #16]
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	f003 0307 	and.w	r3, r3, #7
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	08da      	lsrs	r2, r3, #3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3208      	adds	r2, #8
 8000bc8:	6939      	ldr	r1, [r7, #16]
 8000bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	2203      	movs	r2, #3
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0203 	and.w	r2, r3, #3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 8094 	beq.w	8000d38 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c10:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <HAL_GPIO_Init+0x2c0>)
 8000c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c14:	4a51      	ldr	r2, [pc, #324]	; (8000d5c <HAL_GPIO_Init+0x2c0>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c1c:	4b4f      	ldr	r3, [pc, #316]	; (8000d5c <HAL_GPIO_Init+0x2c0>)
 8000c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c28:	4a4d      	ldr	r2, [pc, #308]	; (8000d60 <HAL_GPIO_Init+0x2c4>)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	220f      	movs	r2, #15
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c52:	d00d      	beq.n	8000c70 <HAL_GPIO_Init+0x1d4>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a43      	ldr	r2, [pc, #268]	; (8000d64 <HAL_GPIO_Init+0x2c8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d007      	beq.n	8000c6c <HAL_GPIO_Init+0x1d0>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a42      	ldr	r2, [pc, #264]	; (8000d68 <HAL_GPIO_Init+0x2cc>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d101      	bne.n	8000c68 <HAL_GPIO_Init+0x1cc>
 8000c64:	2302      	movs	r3, #2
 8000c66:	e004      	b.n	8000c72 <HAL_GPIO_Init+0x1d6>
 8000c68:	2307      	movs	r3, #7
 8000c6a:	e002      	b.n	8000c72 <HAL_GPIO_Init+0x1d6>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <HAL_GPIO_Init+0x1d6>
 8000c70:	2300      	movs	r3, #0
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	f002 0203 	and.w	r2, r2, #3
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	4093      	lsls	r3, r2
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c82:	4937      	ldr	r1, [pc, #220]	; (8000d60 <HAL_GPIO_Init+0x2c4>)
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	3302      	adds	r3, #2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c90:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d003      	beq.n	8000cb4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cb4:	4a2d      	ldr	r2, [pc, #180]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cba:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cde:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ce4:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d08:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	fa22 f303 	lsr.w	r3, r2, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f47f aeaf 	bne.w	8000aac <HAL_GPIO_Init+0x10>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	bf00      	nop
 8000d52:	371c      	adds	r7, #28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010000 	.word	0x40010000
 8000d64:	48000400 	.word	0x48000400
 8000d68:	48000800 	.word	0x48000800
 8000d6c:	40010400 	.word	0x40010400

08000d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d80:	787b      	ldrb	r3, [r7, #1]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d86:	887a      	ldrh	r2, [r7, #2]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d8c:	e002      	b.n	8000d94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d8e:	887a      	ldrh	r2, [r7, #2]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000db2:	887a      	ldrh	r2, [r7, #2]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4013      	ands	r3, r2
 8000db8:	041a      	lsls	r2, r3, #16
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43d9      	mvns	r1, r3
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	400b      	ands	r3, r1
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	619a      	str	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40007000 	.word	0x40007000

08000df4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <HAL_PWREx_GetVoltageRange+0x18>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40007000 	.word	0x40007000

08000e10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e1e:	d130      	bne.n	8000e82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e2c:	d038      	beq.n	8000ea0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e36:	4a1e      	ldr	r2, [pc, #120]	; (8000eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2232      	movs	r2, #50	; 0x32
 8000e44:	fb02 f303 	mul.w	r3, r2, r3
 8000e48:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	0c9b      	lsrs	r3, r3, #18
 8000e50:	3301      	adds	r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e54:	e002      	b.n	8000e5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e68:	d102      	bne.n	8000e70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1f2      	bne.n	8000e56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e7c:	d110      	bne.n	8000ea0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e00f      	b.n	8000ea2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e8e:	d007      	beq.n	8000ea0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e98:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40007000 	.word	0x40007000
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	431bde83 	.word	0x431bde83

08000ebc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d102      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f000 bc11 	b.w	80016f2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ed0:	4ba0      	ldr	r3, [pc, #640]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 030c 	and.w	r3, r3, #12
 8000ed8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eda:	4b9e      	ldr	r3, [pc, #632]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f000 80e4 	beq.w	80010ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d007      	beq.n	8000f08 <HAL_RCC_OscConfig+0x4c>
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	2b0c      	cmp	r3, #12
 8000efc:	f040 808b 	bne.w	8001016 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	f040 8087 	bne.w	8001016 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f08:	4b92      	ldr	r3, [pc, #584]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d005      	beq.n	8000f20 <HAL_RCC_OscConfig+0x64>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e3e8      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a1a      	ldr	r2, [r3, #32]
 8000f24:	4b8b      	ldr	r3, [pc, #556]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0308 	and.w	r3, r3, #8
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <HAL_RCC_OscConfig+0x7e>
 8000f30:	4b88      	ldr	r3, [pc, #544]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f38:	e005      	b.n	8000f46 <HAL_RCC_OscConfig+0x8a>
 8000f3a:	4b86      	ldr	r3, [pc, #536]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f40:	091b      	lsrs	r3, r3, #4
 8000f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d223      	bcs.n	8000f92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fd42 	bl	80019d8 <RCC_SetFlashLatencyFromMSIRange>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e3c9      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f5e:	4b7d      	ldr	r3, [pc, #500]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a7c      	ldr	r2, [pc, #496]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b7a      	ldr	r3, [pc, #488]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	4977      	ldr	r1, [pc, #476]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f7c:	4b75      	ldr	r3, [pc, #468]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	4972      	ldr	r1, [pc, #456]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	604b      	str	r3, [r1, #4]
 8000f90:	e025      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f92:	4b70      	ldr	r3, [pc, #448]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a6f      	ldr	r2, [pc, #444]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b6d      	ldr	r3, [pc, #436]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a1b      	ldr	r3, [r3, #32]
 8000faa:	496a      	ldr	r1, [pc, #424]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fb0:	4b68      	ldr	r3, [pc, #416]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	4965      	ldr	r1, [pc, #404]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d109      	bne.n	8000fde <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fd02 	bl	80019d8 <RCC_SetFlashLatencyFromMSIRange>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e389      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fde:	f000 fc6f 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	4b5b      	ldr	r3, [pc, #364]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	091b      	lsrs	r3, r3, #4
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	495a      	ldr	r1, [pc, #360]	; (8001158 <HAL_RCC_OscConfig+0x29c>)
 8000ff0:	5ccb      	ldrb	r3, [r1, r3]
 8000ff2:	f003 031f 	and.w	r3, r3, #31
 8000ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffa:	4a58      	ldr	r2, [pc, #352]	; (800115c <HAL_RCC_OscConfig+0x2a0>)
 8000ffc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ffe:	4b58      	ldr	r3, [pc, #352]	; (8001160 <HAL_RCC_OscConfig+0x2a4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fbe4 	bl	80007d0 <HAL_InitTick>
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d052      	beq.n	80010b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	e36d      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d032      	beq.n	8001084 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800101e:	4b4d      	ldr	r3, [pc, #308]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a4c      	ldr	r2, [pc, #304]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800102a:	f7ff fc21 	bl	8000870 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001032:	f7ff fc1d 	bl	8000870 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e356      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001044:	4b43      	ldr	r3, [pc, #268]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f0      	beq.n	8001032 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001050:	4b40      	ldr	r3, [pc, #256]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a3f      	ldr	r2, [pc, #252]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001056:	f043 0308 	orr.w	r3, r3, #8
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	493a      	ldr	r1, [pc, #232]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 800106a:	4313      	orrs	r3, r2
 800106c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	4935      	ldr	r1, [pc, #212]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 800107e:	4313      	orrs	r3, r2
 8001080:	604b      	str	r3, [r1, #4]
 8001082:	e01a      	b.n	80010ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001084:	4b33      	ldr	r3, [pc, #204]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a32      	ldr	r2, [pc, #200]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 800108a:	f023 0301 	bic.w	r3, r3, #1
 800108e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001090:	f7ff fbee 	bl	8000870 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001098:	f7ff fbea 	bl	8000870 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e323      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0x1dc>
 80010b6:	e000      	b.n	80010ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d073      	beq.n	80011ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d005      	beq.n	80010d8 <HAL_RCC_OscConfig+0x21c>
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2b0c      	cmp	r3, #12
 80010d0:	d10e      	bne.n	80010f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d10b      	bne.n	80010f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d063      	beq.n	80011ac <HAL_RCC_OscConfig+0x2f0>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d15f      	bne.n	80011ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e300      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f8:	d106      	bne.n	8001108 <HAL_RCC_OscConfig+0x24c>
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a15      	ldr	r2, [pc, #84]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e01d      	b.n	8001144 <HAL_RCC_OscConfig+0x288>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001110:	d10c      	bne.n	800112c <HAL_RCC_OscConfig+0x270>
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e00b      	b.n	8001144 <HAL_RCC_OscConfig+0x288>
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a08      	ldr	r2, [pc, #32]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a05      	ldr	r2, [pc, #20]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 800113e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d01b      	beq.n	8001184 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114c:	f7ff fb90 	bl	8000870 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001152:	e010      	b.n	8001176 <HAL_RCC_OscConfig+0x2ba>
 8001154:	40021000 	.word	0x40021000
 8001158:	08002b30 	.word	0x08002b30
 800115c:	20000000 	.word	0x20000000
 8001160:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fb84 	bl	8000870 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e2bd      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001176:	4baf      	ldr	r3, [pc, #700]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0x2a8>
 8001182:	e014      	b.n	80011ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001184:	f7ff fb74 	bl	8000870 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fb70 	bl	8000870 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e2a9      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800119e:	4ba5      	ldr	r3, [pc, #660]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x2d0>
 80011aa:	e000      	b.n	80011ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d060      	beq.n	800127c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d005      	beq.n	80011cc <HAL_RCC_OscConfig+0x310>
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	2b0c      	cmp	r3, #12
 80011c4:	d119      	bne.n	80011fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d116      	bne.n	80011fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011cc:	4b99      	ldr	r3, [pc, #612]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_OscConfig+0x328>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e286      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e4:	4b93      	ldr	r3, [pc, #588]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	061b      	lsls	r3, r3, #24
 80011f2:	4990      	ldr	r1, [pc, #576]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f8:	e040      	b.n	800127c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d023      	beq.n	800124a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001202:	4b8c      	ldr	r3, [pc, #560]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a8b      	ldr	r2, [pc, #556]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120e:	f7ff fb2f 	bl	8000870 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001216:	f7ff fb2b 	bl	8000870 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e264      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001228:	4b82      	ldr	r3, [pc, #520]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001234:	4b7f      	ldr	r3, [pc, #508]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	061b      	lsls	r3, r3, #24
 8001242:	497c      	ldr	r1, [pc, #496]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
 8001248:	e018      	b.n	800127c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124a:	4b7a      	ldr	r3, [pc, #488]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a79      	ldr	r2, [pc, #484]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001256:	f7ff fb0b 	bl	8000870 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125e:	f7ff fb07 	bl	8000870 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e240      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001270:	4b70      	ldr	r3, [pc, #448]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f0      	bne.n	800125e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	2b00      	cmp	r3, #0
 8001286:	d03c      	beq.n	8001302 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d01c      	beq.n	80012ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001290:	4b68      	ldr	r3, [pc, #416]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001296:	4a67      	ldr	r2, [pc, #412]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a0:	f7ff fae6 	bl	8000870 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a8:	f7ff fae2 	bl	8000870 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e21b      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012ba:	4b5e      	ldr	r3, [pc, #376]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80012bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0ef      	beq.n	80012a8 <HAL_RCC_OscConfig+0x3ec>
 80012c8:	e01b      	b.n	8001302 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ca:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80012cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012d0:	4a58      	ldr	r2, [pc, #352]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80012d2:	f023 0301 	bic.w	r3, r3, #1
 80012d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012da:	f7ff fac9 	bl	8000870 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e2:	f7ff fac5 	bl	8000870 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e1fe      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012f4:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80012f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1ef      	bne.n	80012e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 80a6 	beq.w	800145c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001314:	4b47      	ldr	r3, [pc, #284]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10d      	bne.n	800133c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	4b44      	ldr	r3, [pc, #272]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001324:	4a43      	ldr	r2, [pc, #268]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132a:	6593      	str	r3, [r2, #88]	; 0x58
 800132c:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001338:	2301      	movs	r3, #1
 800133a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800133c:	4b3e      	ldr	r3, [pc, #248]	; (8001438 <HAL_RCC_OscConfig+0x57c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001344:	2b00      	cmp	r3, #0
 8001346:	d118      	bne.n	800137a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001348:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <HAL_RCC_OscConfig+0x57c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a3a      	ldr	r2, [pc, #232]	; (8001438 <HAL_RCC_OscConfig+0x57c>)
 800134e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001352:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001354:	f7ff fa8c 	bl	8000870 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135c:	f7ff fa88 	bl	8000870 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e1c1      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800136e:	4b32      	ldr	r3, [pc, #200]	; (8001438 <HAL_RCC_OscConfig+0x57c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d108      	bne.n	8001394 <HAL_RCC_OscConfig+0x4d8>
 8001382:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001388:	4a2a      	ldr	r2, [pc, #168]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001392:	e024      	b.n	80013de <HAL_RCC_OscConfig+0x522>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b05      	cmp	r3, #5
 800139a:	d110      	bne.n	80013be <HAL_RCC_OscConfig+0x502>
 800139c:	4b25      	ldr	r3, [pc, #148]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 800139e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013a2:	4a24      	ldr	r2, [pc, #144]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80013ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b2:	4a20      	ldr	r2, [pc, #128]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013bc:	e00f      	b.n	80013de <HAL_RCC_OscConfig+0x522>
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80013c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c4:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80013d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d4:	4a17      	ldr	r2, [pc, #92]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80013d6:	f023 0304 	bic.w	r3, r3, #4
 80013da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d016      	beq.n	8001414 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e6:	f7ff fa43 	bl	8000870 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff fa3f 	bl	8000870 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e176      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0ed      	beq.n	80013ee <HAL_RCC_OscConfig+0x532>
 8001412:	e01a      	b.n	800144a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001414:	f7ff fa2c 	bl	8000870 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800141a:	e00f      	b.n	800143c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141c:	f7ff fa28 	bl	8000870 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f241 3288 	movw	r2, #5000	; 0x1388
 800142a:	4293      	cmp	r3, r2
 800142c:	d906      	bls.n	800143c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e15f      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800143c:	4baa      	ldr	r3, [pc, #680]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 800143e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1e8      	bne.n	800141c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800144a:	7ffb      	ldrb	r3, [r7, #31]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d105      	bne.n	800145c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001450:	4ba5      	ldr	r3, [pc, #660]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 8001452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001454:	4aa4      	ldr	r2, [pc, #656]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 8001456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800145a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0320 	and.w	r3, r3, #32
 8001464:	2b00      	cmp	r3, #0
 8001466:	d03c      	beq.n	80014e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	2b00      	cmp	r3, #0
 800146e:	d01c      	beq.n	80014aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001470:	4b9d      	ldr	r3, [pc, #628]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 8001472:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001476:	4a9c      	ldr	r2, [pc, #624]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001480:	f7ff f9f6 	bl	8000870 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001488:	f7ff f9f2 	bl	8000870 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e12b      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800149a:	4b93      	ldr	r3, [pc, #588]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 800149c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0ef      	beq.n	8001488 <HAL_RCC_OscConfig+0x5cc>
 80014a8:	e01b      	b.n	80014e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014aa:	4b8f      	ldr	r3, [pc, #572]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 80014ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014b0:	4a8d      	ldr	r2, [pc, #564]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ba:	f7ff f9d9 	bl	8000870 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014c2:	f7ff f9d5 	bl	8000870 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e10e      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014d4:	4b84      	ldr	r3, [pc, #528]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 80014d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1ef      	bne.n	80014c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 8102 	beq.w	80016f0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	f040 80c5 	bne.w	8001680 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014f6:	4b7c      	ldr	r3, [pc, #496]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f003 0203 	and.w	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	429a      	cmp	r2, r3
 8001508:	d12c      	bne.n	8001564 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	3b01      	subs	r3, #1
 8001516:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001518:	429a      	cmp	r2, r3
 800151a:	d123      	bne.n	8001564 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001526:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d11b      	bne.n	8001564 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001536:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d113      	bne.n	8001564 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001546:	085b      	lsrs	r3, r3, #1
 8001548:	3b01      	subs	r3, #1
 800154a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800154c:	429a      	cmp	r2, r3
 800154e:	d109      	bne.n	8001564 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	3b01      	subs	r3, #1
 800155e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d067      	beq.n	8001634 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b0c      	cmp	r3, #12
 8001568:	d062      	beq.n	8001630 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800156a:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e0bb      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800157a:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a5a      	ldr	r2, [pc, #360]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 8001580:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001584:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001586:	f7ff f973 	bl	8000870 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158e:	f7ff f96f 	bl	8000870 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e0a8      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a0:	4b51      	ldr	r3, [pc, #324]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ac:	4b4e      	ldr	r3, [pc, #312]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	4b4e      	ldr	r3, [pc, #312]	; (80016ec <HAL_RCC_OscConfig+0x830>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015bc:	3a01      	subs	r2, #1
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	4311      	orrs	r1, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015c6:	0212      	lsls	r2, r2, #8
 80015c8:	4311      	orrs	r1, r2
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015ce:	0852      	lsrs	r2, r2, #1
 80015d0:	3a01      	subs	r2, #1
 80015d2:	0552      	lsls	r2, r2, #21
 80015d4:	4311      	orrs	r1, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015da:	0852      	lsrs	r2, r2, #1
 80015dc:	3a01      	subs	r2, #1
 80015de:	0652      	lsls	r2, r2, #25
 80015e0:	4311      	orrs	r1, r2
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015e6:	06d2      	lsls	r2, r2, #27
 80015e8:	430a      	orrs	r2, r1
 80015ea:	493f      	ldr	r1, [pc, #252]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015f0:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a3c      	ldr	r2, [pc, #240]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 80015f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015fc:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4a39      	ldr	r2, [pc, #228]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 8001602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001606:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001608:	f7ff f932 	bl	8000870 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff f92e 	bl	8000870 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e067      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800162e:	e05f      	b.n	80016f0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e05e      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001634:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d157      	bne.n	80016f0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a28      	ldr	r2, [pc, #160]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 8001646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800164c:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a25      	ldr	r2, [pc, #148]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 8001652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001656:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001658:	f7ff f90a 	bl	8000870 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff f906 	bl	8000870 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e03f      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x7a4>
 800167e:	e037      	b.n	80016f0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2b0c      	cmp	r3, #12
 8001684:	d02d      	beq.n	80016e2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 800168c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001690:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d105      	bne.n	80016aa <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 80016a4:	f023 0303 	bic.w	r3, r3, #3
 80016a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 80016b0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ba:	f7ff f8d9 	bl	8000870 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c2:	f7ff f8d5 	bl	8000870 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e00e      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <HAL_RCC_OscConfig+0x82c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f0      	bne.n	80016c2 <HAL_RCC_OscConfig+0x806>
 80016e0:	e006      	b.n	80016f0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e005      	b.n	80016f2 <HAL_RCC_OscConfig+0x836>
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop

080016fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0c8      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001710:	4b66      	ldr	r3, [pc, #408]	; (80018ac <HAL_RCC_ClockConfig+0x1b0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d910      	bls.n	8001740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_ClockConfig+0x1b0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 0207 	bic.w	r2, r3, #7
 8001726:	4961      	ldr	r1, [pc, #388]	; (80018ac <HAL_RCC_ClockConfig+0x1b0>)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	4313      	orrs	r3, r2
 800172c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172e:	4b5f      	ldr	r3, [pc, #380]	; (80018ac <HAL_RCC_ClockConfig+0x1b0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d001      	beq.n	8001740 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0b0      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d04c      	beq.n	80017e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b03      	cmp	r3, #3
 8001752:	d107      	bne.n	8001764 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001754:	4b56      	ldr	r3, [pc, #344]	; (80018b0 <HAL_RCC_ClockConfig+0x1b4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d121      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e09e      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d107      	bne.n	800177c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176c:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_ClockConfig+0x1b4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d115      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e092      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d107      	bne.n	8001794 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001784:	4b4a      	ldr	r3, [pc, #296]	; (80018b0 <HAL_RCC_ClockConfig+0x1b4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d109      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e086      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001794:	4b46      	ldr	r3, [pc, #280]	; (80018b0 <HAL_RCC_ClockConfig+0x1b4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e07e      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017a4:	4b42      	ldr	r3, [pc, #264]	; (80018b0 <HAL_RCC_ClockConfig+0x1b4>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 0203 	bic.w	r2, r3, #3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	493f      	ldr	r1, [pc, #252]	; (80018b0 <HAL_RCC_ClockConfig+0x1b4>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017b6:	f7ff f85b 	bl	8000870 <HAL_GetTick>
 80017ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017be:	f7ff f857 	bl	8000870 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e066      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d4:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <HAL_RCC_ClockConfig+0x1b4>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 020c 	and.w	r2, r3, #12
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d1eb      	bne.n	80017be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d008      	beq.n	8001804 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f2:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <HAL_RCC_ClockConfig+0x1b4>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	492c      	ldr	r1, [pc, #176]	; (80018b0 <HAL_RCC_ClockConfig+0x1b4>)
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001804:	4b29      	ldr	r3, [pc, #164]	; (80018ac <HAL_RCC_ClockConfig+0x1b0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d210      	bcs.n	8001834 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b26      	ldr	r3, [pc, #152]	; (80018ac <HAL_RCC_ClockConfig+0x1b0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 0207 	bic.w	r2, r3, #7
 800181a:	4924      	ldr	r1, [pc, #144]	; (80018ac <HAL_RCC_ClockConfig+0x1b0>)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <HAL_RCC_ClockConfig+0x1b0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e036      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_RCC_ClockConfig+0x1b4>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4918      	ldr	r1, [pc, #96]	; (80018b0 <HAL_RCC_ClockConfig+0x1b4>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_RCC_ClockConfig+0x1b4>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4910      	ldr	r1, [pc, #64]	; (80018b0 <HAL_RCC_ClockConfig+0x1b4>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001872:	f000 f825 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 8001876:	4602      	mov	r2, r0
 8001878:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_RCC_ClockConfig+0x1b4>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	490c      	ldr	r1, [pc, #48]	; (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	5ccb      	ldrb	r3, [r1, r3]
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_RCC_ClockConfig+0x1c0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe ff9a 	bl	80007d0 <HAL_InitTick>
 800189c:	4603      	mov	r3, r0
 800189e:	72fb      	strb	r3, [r7, #11]

  return status;
 80018a0:	7afb      	ldrb	r3, [r7, #11]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40022000 	.word	0x40022000
 80018b0:	40021000 	.word	0x40021000
 80018b4:	08002b30 	.word	0x08002b30
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ce:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d8:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x34>
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d121      	bne.n	8001932 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d11e      	bne.n	8001932 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018f4:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001900:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001906:	0a1b      	lsrs	r3, r3, #8
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	e005      	b.n	800191c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001910:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800191c:	4a2b      	ldr	r2, [pc, #172]	; (80019cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001924:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10d      	bne.n	8001948 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	2b04      	cmp	r3, #4
 8001936:	d102      	bne.n	800193e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001938:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	e004      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b08      	cmp	r3, #8
 8001942:	d101      	bne.n	8001948 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001944:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001946:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	2b0c      	cmp	r3, #12
 800194c:	d134      	bne.n	80019b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800194e:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d003      	beq.n	8001966 <HAL_RCC_GetSysClockFreq+0xa6>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d003      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0xac>
 8001964:	e005      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001968:	617b      	str	r3, [r7, #20]
      break;
 800196a:	e005      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800196e:	617b      	str	r3, [r7, #20]
      break;
 8001970:	e002      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	617b      	str	r3, [r7, #20]
      break;
 8001976:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	3301      	adds	r3, #1
 8001984:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	0a1b      	lsrs	r3, r3, #8
 800198c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	fb02 f203 	mul.w	r2, r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	fbb2 f3f3 	udiv	r3, r2, r3
 800199c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	0e5b      	lsrs	r3, r3, #25
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	3301      	adds	r3, #1
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019b8:	69bb      	ldr	r3, [r7, #24]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	; 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	08002b40 	.word	0x08002b40
 80019d0:	00f42400 	.word	0x00f42400
 80019d4:	007a1200 	.word	0x007a1200

080019d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019e4:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019f0:	f7ff fa00 	bl	8000df4 <HAL_PWREx_GetVoltageRange>
 80019f4:	6178      	str	r0, [r7, #20]
 80019f6:	e014      	b.n	8001a22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f8:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fc:	4a24      	ldr	r2, [pc, #144]	; (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6593      	str	r3, [r2, #88]	; 0x58
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a10:	f7ff f9f0 	bl	8000df4 <HAL_PWREx_GetVoltageRange>
 8001a14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a16:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a28:	d10b      	bne.n	8001a42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b80      	cmp	r3, #128	; 0x80
 8001a2e:	d919      	bls.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2ba0      	cmp	r3, #160	; 0xa0
 8001a34:	d902      	bls.n	8001a3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a36:	2302      	movs	r3, #2
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	e013      	b.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	e010      	b.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b80      	cmp	r3, #128	; 0x80
 8001a46:	d902      	bls.n	8001a4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a48:	2303      	movs	r3, #3
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	e00a      	b.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b80      	cmp	r3, #128	; 0x80
 8001a52:	d102      	bne.n	8001a5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a54:	2302      	movs	r3, #2
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	e004      	b.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b70      	cmp	r3, #112	; 0x70
 8001a5e:	d101      	bne.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a60:	2301      	movs	r3, #1
 8001a62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 0207 	bic.w	r2, r3, #7
 8001a6c:	4909      	ldr	r1, [pc, #36]	; (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d001      	beq.n	8001a86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40022000 	.word	0x40022000

08001a98 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6013      	str	r3, [r2, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e049      	b.n	8001b5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7fe fd82 	bl	80005e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3304      	adds	r3, #4
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f000 fbda 	bl	80022b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e049      	b.n	8001c0c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d106      	bne.n	8001b92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f841 	bl	8001c14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2202      	movs	r2, #2
 8001b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	f000 fb83 	bl	80022b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d109      	bne.n	8001c4c <HAL_TIM_PWM_Start+0x24>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	bf14      	ite	ne
 8001c44:	2301      	movne	r3, #1
 8001c46:	2300      	moveq	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	e03c      	b.n	8001cc6 <HAL_TIM_PWM_Start+0x9e>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d109      	bne.n	8001c66 <HAL_TIM_PWM_Start+0x3e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	bf14      	ite	ne
 8001c5e:	2301      	movne	r3, #1
 8001c60:	2300      	moveq	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	e02f      	b.n	8001cc6 <HAL_TIM_PWM_Start+0x9e>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d109      	bne.n	8001c80 <HAL_TIM_PWM_Start+0x58>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	e022      	b.n	8001cc6 <HAL_TIM_PWM_Start+0x9e>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d109      	bne.n	8001c9a <HAL_TIM_PWM_Start+0x72>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	bf14      	ite	ne
 8001c92:	2301      	movne	r3, #1
 8001c94:	2300      	moveq	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	e015      	b.n	8001cc6 <HAL_TIM_PWM_Start+0x9e>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b10      	cmp	r3, #16
 8001c9e:	d109      	bne.n	8001cb4 <HAL_TIM_PWM_Start+0x8c>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	bf14      	ite	ne
 8001cac:	2301      	movne	r3, #1
 8001cae:	2300      	moveq	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	e008      	b.n	8001cc6 <HAL_TIM_PWM_Start+0x9e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e07e      	b.n	8001dcc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d104      	bne.n	8001cde <HAL_TIM_PWM_Start+0xb6>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cdc:	e023      	b.n	8001d26 <HAL_TIM_PWM_Start+0xfe>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d104      	bne.n	8001cee <HAL_TIM_PWM_Start+0xc6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cec:	e01b      	b.n	8001d26 <HAL_TIM_PWM_Start+0xfe>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d104      	bne.n	8001cfe <HAL_TIM_PWM_Start+0xd6>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cfc:	e013      	b.n	8001d26 <HAL_TIM_PWM_Start+0xfe>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b0c      	cmp	r3, #12
 8001d02:	d104      	bne.n	8001d0e <HAL_TIM_PWM_Start+0xe6>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d0c:	e00b      	b.n	8001d26 <HAL_TIM_PWM_Start+0xfe>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	d104      	bne.n	8001d1e <HAL_TIM_PWM_Start+0xf6>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d1c:	e003      	b.n	8001d26 <HAL_TIM_PWM_Start+0xfe>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2202      	movs	r2, #2
 8001d22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	6839      	ldr	r1, [r7, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 fe3a 	bl	80029a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a26      	ldr	r2, [pc, #152]	; (8001dd4 <HAL_TIM_PWM_Start+0x1ac>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d009      	beq.n	8001d52 <HAL_TIM_PWM_Start+0x12a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a25      	ldr	r2, [pc, #148]	; (8001dd8 <HAL_TIM_PWM_Start+0x1b0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d004      	beq.n	8001d52 <HAL_TIM_PWM_Start+0x12a>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <HAL_TIM_PWM_Start+0x1b4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_TIM_PWM_Start+0x12e>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_TIM_PWM_Start+0x130>
 8001d56:	2300      	movs	r3, #0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a18      	ldr	r2, [pc, #96]	; (8001dd4 <HAL_TIM_PWM_Start+0x1ac>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d009      	beq.n	8001d8a <HAL_TIM_PWM_Start+0x162>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7e:	d004      	beq.n	8001d8a <HAL_TIM_PWM_Start+0x162>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <HAL_TIM_PWM_Start+0x1b0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d115      	bne.n	8001db6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <HAL_TIM_PWM_Start+0x1b8>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b06      	cmp	r3, #6
 8001d9a:	d015      	beq.n	8001dc8 <HAL_TIM_PWM_Start+0x1a0>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da2:	d011      	beq.n	8001dc8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db4:	e008      	b.n	8001dc8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0201 	orr.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	e000      	b.n	8001dca <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40014000 	.word	0x40014000
 8001ddc:	40014400 	.word	0x40014400
 8001de0:	00010007 	.word	0x00010007

08001de4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	6839      	ldr	r1, [r7, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fdd6 	bl	80029a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a39      	ldr	r2, [pc, #228]	; (8001ee8 <HAL_TIM_PWM_Stop+0x104>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d009      	beq.n	8001e1a <HAL_TIM_PWM_Stop+0x36>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a38      	ldr	r2, [pc, #224]	; (8001eec <HAL_TIM_PWM_Stop+0x108>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d004      	beq.n	8001e1a <HAL_TIM_PWM_Stop+0x36>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a36      	ldr	r2, [pc, #216]	; (8001ef0 <HAL_TIM_PWM_Stop+0x10c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_TIM_PWM_Stop+0x3a>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_TIM_PWM_Stop+0x3c>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d017      	beq.n	8001e54 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6a1a      	ldr	r2, [r3, #32]
 8001e2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10f      	bne.n	8001e54 <HAL_TIM_PWM_Stop+0x70>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6a1a      	ldr	r2, [r3, #32]
 8001e3a:	f240 4344 	movw	r3, #1092	; 0x444
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d107      	bne.n	8001e54 <HAL_TIM_PWM_Stop+0x70>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6a1a      	ldr	r2, [r3, #32]
 8001e5a:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10f      	bne.n	8001e84 <HAL_TIM_PWM_Stop+0xa0>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6a1a      	ldr	r2, [r3, #32]
 8001e6a:	f240 4344 	movw	r3, #1092	; 0x444
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d107      	bne.n	8001e84 <HAL_TIM_PWM_Stop+0xa0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d104      	bne.n	8001e94 <HAL_TIM_PWM_Stop+0xb0>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e92:	e023      	b.n	8001edc <HAL_TIM_PWM_Stop+0xf8>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d104      	bne.n	8001ea4 <HAL_TIM_PWM_Stop+0xc0>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea2:	e01b      	b.n	8001edc <HAL_TIM_PWM_Stop+0xf8>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d104      	bne.n	8001eb4 <HAL_TIM_PWM_Stop+0xd0>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eb2:	e013      	b.n	8001edc <HAL_TIM_PWM_Stop+0xf8>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2b0c      	cmp	r3, #12
 8001eb8:	d104      	bne.n	8001ec4 <HAL_TIM_PWM_Stop+0xe0>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ec2:	e00b      	b.n	8001edc <HAL_TIM_PWM_Stop+0xf8>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d104      	bne.n	8001ed4 <HAL_TIM_PWM_Stop+0xf0>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ed2:	e003      	b.n	8001edc <HAL_TIM_PWM_Stop+0xf8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40012c00 	.word	0x40012c00
 8001eec:	40014000 	.word	0x40014000
 8001ef0:	40014400 	.word	0x40014400

08001ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e0ff      	b.n	8002112 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b14      	cmp	r3, #20
 8001f1e:	f200 80f0 	bhi.w	8002102 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001f22:	a201      	add	r2, pc, #4	; (adr r2, 8001f28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f28:	08001f7d 	.word	0x08001f7d
 8001f2c:	08002103 	.word	0x08002103
 8001f30:	08002103 	.word	0x08002103
 8001f34:	08002103 	.word	0x08002103
 8001f38:	08001fbd 	.word	0x08001fbd
 8001f3c:	08002103 	.word	0x08002103
 8001f40:	08002103 	.word	0x08002103
 8001f44:	08002103 	.word	0x08002103
 8001f48:	08001fff 	.word	0x08001fff
 8001f4c:	08002103 	.word	0x08002103
 8001f50:	08002103 	.word	0x08002103
 8001f54:	08002103 	.word	0x08002103
 8001f58:	0800203f 	.word	0x0800203f
 8001f5c:	08002103 	.word	0x08002103
 8001f60:	08002103 	.word	0x08002103
 8001f64:	08002103 	.word	0x08002103
 8001f68:	08002081 	.word	0x08002081
 8001f6c:	08002103 	.word	0x08002103
 8001f70:	08002103 	.word	0x08002103
 8001f74:	08002103 	.word	0x08002103
 8001f78:	080020c1 	.word	0x080020c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f9f8 	bl	8002378 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699a      	ldr	r2, [r3, #24]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0208 	orr.w	r2, r2, #8
 8001f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699a      	ldr	r2, [r3, #24]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0204 	bic.w	r2, r2, #4
 8001fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6999      	ldr	r1, [r3, #24]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	619a      	str	r2, [r3, #24]
      break;
 8001fba:	e0a5      	b.n	8002108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fa54 	bl	8002470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699a      	ldr	r2, [r3, #24]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6999      	ldr	r1, [r3, #24]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	021a      	lsls	r2, r3, #8
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	619a      	str	r2, [r3, #24]
      break;
 8001ffc:	e084      	b.n	8002108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	4618      	mov	r0, r3
 8002006:	f000 faad 	bl	8002564 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	69da      	ldr	r2, [r3, #28]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0208 	orr.w	r2, r2, #8
 8002018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69da      	ldr	r2, [r3, #28]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0204 	bic.w	r2, r2, #4
 8002028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	69d9      	ldr	r1, [r3, #28]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	61da      	str	r2, [r3, #28]
      break;
 800203c:	e064      	b.n	8002108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	4618      	mov	r0, r3
 8002046:	f000 fb05 	bl	8002654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69da      	ldr	r2, [r3, #28]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	69da      	ldr	r2, [r3, #28]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69d9      	ldr	r1, [r3, #28]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	021a      	lsls	r2, r3, #8
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	61da      	str	r2, [r3, #28]
      break;
 800207e:	e043      	b.n	8002108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fb42 	bl	8002710 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0208 	orr.w	r2, r2, #8
 800209a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0204 	bic.w	r2, r2, #4
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80020be:	e023      	b.n	8002108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fb7a 	bl	80027c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	021a      	lsls	r2, r3, #8
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002100:	e002      	b.n	8002108 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	75fb      	strb	r3, [r7, #23]
      break;
 8002106:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002110:	7dfb      	ldrb	r3, [r7, #23]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop

0800211c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_TIM_ConfigClockSource+0x1c>
 8002134:	2302      	movs	r3, #2
 8002136:	e0b6      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x18a>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002156:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800215a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002174:	d03e      	beq.n	80021f4 <HAL_TIM_ConfigClockSource+0xd8>
 8002176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800217a:	f200 8087 	bhi.w	800228c <HAL_TIM_ConfigClockSource+0x170>
 800217e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002182:	f000 8086 	beq.w	8002292 <HAL_TIM_ConfigClockSource+0x176>
 8002186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218a:	d87f      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x170>
 800218c:	2b70      	cmp	r3, #112	; 0x70
 800218e:	d01a      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0xaa>
 8002190:	2b70      	cmp	r3, #112	; 0x70
 8002192:	d87b      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x170>
 8002194:	2b60      	cmp	r3, #96	; 0x60
 8002196:	d050      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x11e>
 8002198:	2b60      	cmp	r3, #96	; 0x60
 800219a:	d877      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x170>
 800219c:	2b50      	cmp	r3, #80	; 0x50
 800219e:	d03c      	beq.n	800221a <HAL_TIM_ConfigClockSource+0xfe>
 80021a0:	2b50      	cmp	r3, #80	; 0x50
 80021a2:	d873      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x170>
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	d058      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x13e>
 80021a8:	2b40      	cmp	r3, #64	; 0x40
 80021aa:	d86f      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x170>
 80021ac:	2b30      	cmp	r3, #48	; 0x30
 80021ae:	d064      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x15e>
 80021b0:	2b30      	cmp	r3, #48	; 0x30
 80021b2:	d86b      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x170>
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d060      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x15e>
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	d867      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x170>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d05c      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x15e>
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d05a      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x15e>
 80021c4:	e062      	b.n	800228c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6899      	ldr	r1, [r3, #8]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f000 fbc7 	bl	8002968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	609a      	str	r2, [r3, #8]
      break;
 80021f2:	e04f      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f000 fbb0 	bl	8002968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002216:	609a      	str	r2, [r3, #8]
      break;
 8002218:	e03c      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6859      	ldr	r1, [r3, #4]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	461a      	mov	r2, r3
 8002228:	f000 fb24 	bl	8002874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2150      	movs	r1, #80	; 0x50
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fb7d 	bl	8002932 <TIM_ITRx_SetConfig>
      break;
 8002238:	e02c      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	461a      	mov	r2, r3
 8002248:	f000 fb43 	bl	80028d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2160      	movs	r1, #96	; 0x60
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fb6d 	bl	8002932 <TIM_ITRx_SetConfig>
      break;
 8002258:	e01c      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	461a      	mov	r2, r3
 8002268:	f000 fb04 	bl	8002874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2140      	movs	r1, #64	; 0x40
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fb5d 	bl	8002932 <TIM_ITRx_SetConfig>
      break;
 8002278:	e00c      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4619      	mov	r1, r3
 8002284:	4610      	mov	r0, r2
 8002286:	f000 fb54 	bl	8002932 <TIM_ITRx_SetConfig>
      break;
 800228a:	e003      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
      break;
 8002290:	e000      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a2a      	ldr	r2, [pc, #168]	; (800236c <TIM_Base_SetConfig+0xbc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d003      	beq.n	80022d0 <TIM_Base_SetConfig+0x20>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ce:	d108      	bne.n	80022e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a21      	ldr	r2, [pc, #132]	; (800236c <TIM_Base_SetConfig+0xbc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00b      	beq.n	8002302 <TIM_Base_SetConfig+0x52>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f0:	d007      	beq.n	8002302 <TIM_Base_SetConfig+0x52>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a1e      	ldr	r2, [pc, #120]	; (8002370 <TIM_Base_SetConfig+0xc0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d003      	beq.n	8002302 <TIM_Base_SetConfig+0x52>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <TIM_Base_SetConfig+0xc4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d108      	bne.n	8002314 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a0c      	ldr	r2, [pc, #48]	; (800236c <TIM_Base_SetConfig+0xbc>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d007      	beq.n	8002350 <TIM_Base_SetConfig+0xa0>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <TIM_Base_SetConfig+0xc0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d003      	beq.n	8002350 <TIM_Base_SetConfig+0xa0>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <TIM_Base_SetConfig+0xc4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d103      	bne.n	8002358 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	615a      	str	r2, [r3, #20]
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40014000 	.word	0x40014000
 8002374:	40014400 	.word	0x40014400

08002378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	f023 0201 	bic.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0303 	bic.w	r3, r3, #3
 80023b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f023 0302 	bic.w	r3, r3, #2
 80023c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a24      	ldr	r2, [pc, #144]	; (8002464 <TIM_OC1_SetConfig+0xec>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d007      	beq.n	80023e8 <TIM_OC1_SetConfig+0x70>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a23      	ldr	r2, [pc, #140]	; (8002468 <TIM_OC1_SetConfig+0xf0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d003      	beq.n	80023e8 <TIM_OC1_SetConfig+0x70>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a22      	ldr	r2, [pc, #136]	; (800246c <TIM_OC1_SetConfig+0xf4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d10c      	bne.n	8002402 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f023 0308 	bic.w	r3, r3, #8
 80023ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a17      	ldr	r2, [pc, #92]	; (8002464 <TIM_OC1_SetConfig+0xec>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <TIM_OC1_SetConfig+0xa2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a16      	ldr	r2, [pc, #88]	; (8002468 <TIM_OC1_SetConfig+0xf0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d003      	beq.n	800241a <TIM_OC1_SetConfig+0xa2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a15      	ldr	r2, [pc, #84]	; (800246c <TIM_OC1_SetConfig+0xf4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d111      	bne.n	800243e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	621a      	str	r2, [r3, #32]
}
 8002458:	bf00      	nop
 800245a:	371c      	adds	r7, #28
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40012c00 	.word	0x40012c00
 8002468:	40014000 	.word	0x40014000
 800246c:	40014400 	.word	0x40014400

08002470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	f023 0210 	bic.w	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800249e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f023 0320 	bic.w	r3, r3, #32
 80024be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a22      	ldr	r2, [pc, #136]	; (8002558 <TIM_OC2_SetConfig+0xe8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d10d      	bne.n	80024f0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a19      	ldr	r2, [pc, #100]	; (8002558 <TIM_OC2_SetConfig+0xe8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d007      	beq.n	8002508 <TIM_OC2_SetConfig+0x98>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a18      	ldr	r2, [pc, #96]	; (800255c <TIM_OC2_SetConfig+0xec>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d003      	beq.n	8002508 <TIM_OC2_SetConfig+0x98>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <TIM_OC2_SetConfig+0xf0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d113      	bne.n	8002530 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800250e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002516:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	621a      	str	r2, [r3, #32]
}
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40012c00 	.word	0x40012c00
 800255c:	40014000 	.word	0x40014000
 8002560:	40014400 	.word	0x40014400

08002564 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0303 	bic.w	r3, r3, #3
 800259e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a21      	ldr	r2, [pc, #132]	; (8002648 <TIM_OC3_SetConfig+0xe4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10d      	bne.n	80025e2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a18      	ldr	r2, [pc, #96]	; (8002648 <TIM_OC3_SetConfig+0xe4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <TIM_OC3_SetConfig+0x96>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a17      	ldr	r2, [pc, #92]	; (800264c <TIM_OC3_SetConfig+0xe8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d003      	beq.n	80025fa <TIM_OC3_SetConfig+0x96>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a16      	ldr	r2, [pc, #88]	; (8002650 <TIM_OC3_SetConfig+0xec>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d113      	bne.n	8002622 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	621a      	str	r2, [r3, #32]
}
 800263c:	bf00      	nop
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40014000 	.word	0x40014000
 8002650:	40014400 	.word	0x40014400

08002654 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002654:	b480      	push	{r7}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	031b      	lsls	r3, r3, #12
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a14      	ldr	r2, [pc, #80]	; (8002704 <TIM_OC4_SetConfig+0xb0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d007      	beq.n	80026c8 <TIM_OC4_SetConfig+0x74>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a13      	ldr	r2, [pc, #76]	; (8002708 <TIM_OC4_SetConfig+0xb4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d003      	beq.n	80026c8 <TIM_OC4_SetConfig+0x74>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <TIM_OC4_SetConfig+0xb8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d109      	bne.n	80026dc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	019b      	lsls	r3, r3, #6
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4313      	orrs	r3, r2
 80026da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	621a      	str	r2, [r3, #32]
}
 80026f6:	bf00      	nop
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40014000 	.word	0x40014000
 800270c:	40014400 	.word	0x40014400

08002710 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002754:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	041b      	lsls	r3, r3, #16
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <TIM_OC5_SetConfig+0xa4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <TIM_OC5_SetConfig+0x6a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <TIM_OC5_SetConfig+0xa8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d003      	beq.n	800277a <TIM_OC5_SetConfig+0x6a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a11      	ldr	r2, [pc, #68]	; (80027bc <TIM_OC5_SetConfig+0xac>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d109      	bne.n	800278e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002780:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	621a      	str	r2, [r3, #32]
}
 80027a8:	bf00      	nop
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	40012c00 	.word	0x40012c00
 80027b8:	40014000 	.word	0x40014000
 80027bc:	40014400 	.word	0x40014400

080027c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	051b      	lsls	r3, r3, #20
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a14      	ldr	r2, [pc, #80]	; (8002868 <TIM_OC6_SetConfig+0xa8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d007      	beq.n	800282c <TIM_OC6_SetConfig+0x6c>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a13      	ldr	r2, [pc, #76]	; (800286c <TIM_OC6_SetConfig+0xac>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d003      	beq.n	800282c <TIM_OC6_SetConfig+0x6c>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <TIM_OC6_SetConfig+0xb0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d109      	bne.n	8002840 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002832:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	029b      	lsls	r3, r3, #10
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	621a      	str	r2, [r3, #32]
}
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40012c00 	.word	0x40012c00
 800286c:	40014000 	.word	0x40014000
 8002870:	40014400 	.word	0x40014400

08002874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	f023 0201 	bic.w	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800289e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f023 030a 	bic.w	r3, r3, #10
 80028b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	621a      	str	r2, [r3, #32]
}
 80028c6:	bf00      	nop
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b087      	sub	sp, #28
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f023 0210 	bic.w	r2, r3, #16
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	031b      	lsls	r3, r3, #12
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800290e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	621a      	str	r2, [r3, #32]
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002932:	b480      	push	{r7}
 8002934:	b085      	sub	sp, #20
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	f043 0307 	orr.w	r3, r3, #7
 8002954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	609a      	str	r2, [r3, #8]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	021a      	lsls	r2, r3, #8
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	431a      	orrs	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4313      	orrs	r3, r2
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	609a      	str	r2, [r3, #8]
}
 800299c:	bf00      	nop
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	2201      	movs	r2, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a1a      	ldr	r2, [r3, #32]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	401a      	ands	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a1a      	ldr	r2, [r3, #32]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	431a      	orrs	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	621a      	str	r2, [r3, #32]
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e04f      	b.n	8002aac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d108      	bne.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002a3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d009      	beq.n	8002a80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a74:	d004      	beq.n	8002a80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a10      	ldr	r2, [pc, #64]	; (8002abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d10c      	bne.n	8002a9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40014000 	.word	0x40014000

08002ac0 <__libc_init_array>:
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	4d0d      	ldr	r5, [pc, #52]	; (8002af8 <__libc_init_array+0x38>)
 8002ac4:	4c0d      	ldr	r4, [pc, #52]	; (8002afc <__libc_init_array+0x3c>)
 8002ac6:	1b64      	subs	r4, r4, r5
 8002ac8:	10a4      	asrs	r4, r4, #2
 8002aca:	2600      	movs	r6, #0
 8002acc:	42a6      	cmp	r6, r4
 8002ace:	d109      	bne.n	8002ae4 <__libc_init_array+0x24>
 8002ad0:	4d0b      	ldr	r5, [pc, #44]	; (8002b00 <__libc_init_array+0x40>)
 8002ad2:	4c0c      	ldr	r4, [pc, #48]	; (8002b04 <__libc_init_array+0x44>)
 8002ad4:	f000 f820 	bl	8002b18 <_init>
 8002ad8:	1b64      	subs	r4, r4, r5
 8002ada:	10a4      	asrs	r4, r4, #2
 8002adc:	2600      	movs	r6, #0
 8002ade:	42a6      	cmp	r6, r4
 8002ae0:	d105      	bne.n	8002aee <__libc_init_array+0x2e>
 8002ae2:	bd70      	pop	{r4, r5, r6, pc}
 8002ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae8:	4798      	blx	r3
 8002aea:	3601      	adds	r6, #1
 8002aec:	e7ee      	b.n	8002acc <__libc_init_array+0xc>
 8002aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af2:	4798      	blx	r3
 8002af4:	3601      	adds	r6, #1
 8002af6:	e7f2      	b.n	8002ade <__libc_init_array+0x1e>
 8002af8:	08002b70 	.word	0x08002b70
 8002afc:	08002b70 	.word	0x08002b70
 8002b00:	08002b70 	.word	0x08002b70
 8002b04:	08002b74 	.word	0x08002b74

08002b08 <memset>:
 8002b08:	4402      	add	r2, r0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d100      	bne.n	8002b12 <memset+0xa>
 8002b10:	4770      	bx	lr
 8002b12:	f803 1b01 	strb.w	r1, [r3], #1
 8002b16:	e7f9      	b.n	8002b0c <memset+0x4>

08002b18 <_init>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	bf00      	nop
 8002b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1e:	bc08      	pop	{r3}
 8002b20:	469e      	mov	lr, r3
 8002b22:	4770      	bx	lr

08002b24 <_fini>:
 8002b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b26:	bf00      	nop
 8002b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2a:	bc08      	pop	{r3}
 8002b2c:	469e      	mov	lr, r3
 8002b2e:	4770      	bx	lr
